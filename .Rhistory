library("BoolNet")
install.packages("BoolNet")
install.packages("XML")
install.packages("xml2")
cowsay(s)
install.packages("cowsay")
cowsay::say("Zavatrella", by="goat")
cowsay::say("Zavatrella", by="duck")
library("BoolNet")
setwd("/home/chaperone/projects/computationalSystemBiology")
loadSBML("MODEL1606020000.xml")
Network =loadSBML("MODEL1606020000.xml")
stateTransition(network)
network = loadSBML("MODEL1606020000.xml")
stateTransition(network)
?plotStateGraph
STG = getAttractors(network)
STG = getAttractors(network)
plotStateGraph(STG)
microenvironment = c("IL12e", "IFNGe", "IL2e", "IL4e", "IL21e", "TGFBe", "IL10e", "IL27e")
fixGenes(network, fixIndices = microenvironment, values = microenv_values)
network = loadSBML("MODEL1606020000.xml")
microenvironment = c("IL12e", "IFNGe", "IL2e", "IL4e", "IL21e", "TGFBe", "IL10e", "IL27e")
microenv_values = c(1,1,0,0,0,0,0,0)
fixGenes(network, fixIndices = microenvironment, values = microenv_values)
fixGenes(network, "INSULIN", 0)
fixGenes(network, fixIndices = microenvironment, values = microenv_values)
fixGenes(network, "INSULIN", 0)
microenvironment = c("IL12e", "IFNGe", "IL2e", "IL4e", "IL21e", "TGFBe", "IL10e", "IL27e", "INSULIN")
microenv_values = c(1,1,0,0,0,0,0,0, 0)
fixGenes(network, fixIndices = microenvironment, values = microenv_values)
STG = getAttractors(network)
plotStateGraph(STG)
microenvironment = c("IL12e", "IFNGe", "IL2e", "IL4e", "IL21e", "TGFBe", "IL10e", "IL27e", "INSULIN")
pro_Th1_values = c(1,1,0,0,0,0,0,0,0)
fixGenes(network, fixIndices = microenvironment, values = pro_Th1_values)
w
fixGenes(network, fixIndices = microenvironment, values = pro_Th1_values)
STG = getAttractors(network)
STG
network = loadSBML("MODEL1606020000.xml")
microenvironment = c("IL12e", "IFNGe", "IL2e", "IL4e", "IL21e", "TGFBe", "IL10e", "IL27e", "INSULIN")
pro_Th1_values = c(1,1,0,0,0,0,0,0,0)
network = fixGenes(network, fixIndices = microenvironment, values = pro_Th1_values)
#fixGenes(network, "INSULIN", 0)
STG = getAttractors(network)
STG
pro_Th0_values = c(0,0,0,0,0,0,0,0,0)
pro_Th0 = c(0,0,0,0,0,0,0,0,0)
pro_Th1 = c(1,1,0,0,0,0,0,0,0)
network = fixGenes(network, fixIndices = microenvironment, values = pro_Th0)
STG = getAttractors(network)
STG
network = loadSBML("MODEL1606020000.xml")
STG = getAttractors(network)
STG
network = loadSBML("MODEL1606020000.xml")
microenvironment = c("IL12e", "IFNGe", "IL2e", "IL4e", "IL21e", "TGFBe", "IL10e", "IL27e", "INSULIN")
pro_Th0 = c(0,0,0,0,0,0,0,0,0)
pro_Th1 = c(1,1,0,0,0,0,0,0,0)
network = fixGenes(network, fixIndices = microenvironment, values = pro_Th0)
#fixGenes(network, "INSULIN", 0)
STG = getAttractors(network)
plotStateGraph(STG)
STG
network = fixGenes(network, fixIndices = microenvironment, values = pro_Th1)
#fixGenes(network, "INSULIN", 0)
STG = getAttractors(network)
plotStateGraph(STG)
network = fixGenes(network, fixIndices = microenvironment, values = pro_Th0)
STG = getAttractors(network)
plotStateGraph(STG)
STG
network = loadSBML("MODEL1606020000.xml")
microenvironment = c("IL12e", "IFNGe", "IL2e", "IL4e", "IL21e", "TGFBe", "IL10e", "IL27e", "INSULIN")
pro_Th0 = c(0,0,0,0,0,0,0,0,0)
pro_Th1 = c(1,1,0,0,0,0,0,0,0)
network = fixGenes(network, fixIndices = microenvironment, values = pro_Th0)
#fixGenes(network, "INSULIN", 0)
STG = getAttractors(network)
STG
network = loadSBML("MODEL1606020000.xml")
microenvironment = c("IL12e", "IFNGe", "IL2e", "IL4e", "IL21e", "TGFBe", "IL10e", "IL27e", "INSULIN")
pro_Th0 = c(0,0,0,0,0,0,0,0,1)
pro_Th1 = c(1,1,0,0,0,0,0,0,0)
network = fixGenes(network, fixIndices = microenvironment, values = pro_Th0)
#fixGenes(network, "INSULIN", 0)
STG = getAttractors(network)
STG
2 ^ 10
526 + 23+ 5 +  8+ 6 + 8 + 76 +303 + 69
?perturbNetwork()
perturbNetwork(network, "functions", method = "bitflip" )
network
perturbNetwork(network, "transition", method = "bitflip" )
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("usethis")
library(devtools)
install_github("mar-esther23/boolnet-perturb")
library(BoolNetPerturb)
library("BoolNetPerturb", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("BoolNet")
library(devtools)
library(BoolNetPerturb)
?BoolNetPerturb::labelAttractors
labelsTh17Treg = load("./labelsTh17Treg.rda")
labelsTh17Treg = load("./labelsTh17Treg.rda")
labelsTh17Treg
load("~/projects/computationalSystemBiology/labelsTh17Treg.rda")
labelsTh17Treg
rules = data.frame("labels", "rules")
rules
BoolNetPerturb::labelAttractors(STG)
BoolNetPerturb::labelAttractors(STG, labelsTh17Treg)
BoolNetPerturb::labelAttractors(STG, labelsTh17Treg)
STG
labelsTh17Treg
network
labelsTh17Treg
labels = c("Th0", "Th1")
rules = c(! (TBET | GATA3 | RORGT | FOXP3 | IL10 | TGFB), (TBET & IFNG) & ! (IL10 | TGFB | FOXP3))
rules = c("! (TBET | GATA3 | RORGT | FOXP3 | IL10 | TGFB)", "(TBET & IFNG) & ! (IL10 | TGFB | FOXP3)")
df = data.frame(labels, rules)
df
labels = c("Th0", "Th1")
rules = c("!(TBET | GATA3 | RORGT | FOXP3 | IL10 | TGFB)", "(TBET & IFNG) & !(IL10 | TGFB | FOXP3)")
df
df = data.frame(labels, rules)
rules = c("!(TBET | GATA3 | RORGT | FOXP3 | IL10 | TGFB)", "(TBET & IFNG) & !(IL10 | TGFB | FOXP3)")
df.rules = data.frame(labels, rules)
df
BoolNetPerturb::labelAttractors(STG, df.rules)
STG
BoolNetPerturb::labelAttractors(STG, df.rules)
STG$attractors
STG$stateInfo
BoolNetPerturb::labelAttractors(STG, df.rules)
STG
BoolNetPerturb::attractorToDataframe(STG)
df = BoolNetPerturb::attractorToDataframe(STG)
df
?BoolNetPerturb::cellFateMap(network,  ,genes = "INSULIN", )
?BoolNetPerturb::cellFateMap(network)
BoolNetPerturb::cellFateMap(network)
df = BoolNetPerturb::cellFateMap(network, label.rules = df.rules)
df
df$genes
df$values
df
head(df)
df = BoolNetPerturb::cellFateMap(network, label.rules = df.rules)
df
head(df)
BoolNet::getAttractors(network)
network = loadSBML("MODEL1606020000.xml")
BoolNet::getAttractors(network)
#
# Get cell fate map::how do stable states transition based upon trasient pertubations
#
map = BoolNetPerturb::cellFateMap(network, label.rules = df.rules)
head(map)
length(map)
length(map$initial)
2  ^ 19
2^19
2^18
2^17
2^16
network
network
network = fixGenes(network, fixIndices = microenvironment, values = pro_Th0)
network
network = fixGenes(network, fixIndices = microenvironment, values = pro_Th1)
#
# Get cell fate map::how do stable states transition based upon trasient pertubations
#
map = BoolNetPerturb::cellFateMap(network ,label.rules = df.rules)
map
getAttractors(network)
map
19 * 9
network$genes
network
map = BoolNetPerturb::cellFateMap(network, genes = c("TBET", "IFNG", "GATA3", "IL2", "IL4", "RORGT", "IL21", "FOXP3", "TGFB", "IL10"), label.rules = df.rules)
MAP
map
labels = c("Th0", "Th1", "TBET+", "Th1R", "TH2", "GATA3+" , "Th2R", "Th17" , "RORGT+" , "iTreg", "IL10+", "TGFB+")
rules = c("!(TBET | GATA3 | RORGT | FOXP3 | IL10 | TGFB)", "(TBET & IFNG) & !(IL10 | TGFB | FOXP3)", " TBET & !(IFNG | IL10 | TGFB | FOXP3) ", " TBET & (IL10 | TGFB | FOXP3) ", "(GATA3 & IL4) & ! (IL10 | TGFB | FOXP3) ",
" GATA3 & ! (IL4 | IL10 | TGFB| FOXP3)" , " GATA3 & (IL10 | TGFB | FOXP3)" , "RORGT & IL21 & ! IL10" ,
"RORGT & ! (IL21 | IL10)" , "FOXP3 & TGFB & ! (TBET | GATA3 | RORGT)" , "IL10 & ! (TBET | GATA3 | FOXP3 | RORGT)",
"TGFB & ! (TBET | GATA3 | FOXP3 | RORGT)")
df.rules = data.frame(labels, rules)
df.rules
map = BoolNetPerturb::cellFateMap(network, genes = c("TBET", "IFNG", "GATA3", "IL2", "IL4", "RORGT", "IL21", "FOXP3", "TGFB", "IL10"), label.rules = df.rules)
map
map
?BoolNetPerturb::plotPopulationSimulation()
?BoolNetPerturb::plotPopulationSimulation
?plotPopulationSimulation
plotPopulationSimulation(net = networ)
plotPopulationSimulation(net = network)
map
which(map$initial == "Th0")
map$final[which(map$initial == "Th0")]
map$final[which(map$initial == "Th0")]
Adj = matrix(nrow = length(labels), ncol = length(labels))
Adj
?matrix()
Adj = matrix(nrow = length(labels), ncol = length(labels))
colnames(Adj) = labels
rownames(Adj) = labels
Adj
Adj = matrix(0, nrow = length(labels), ncol = length(labels))
colnames(Adj) = labels
rownames(Adj) = labels
Adj
for(cellType in labels) {
finalStates = map$final[which(map$initial == cellType)]
for (state in finalStates) {
Adj[cellType][state] = Adj[cellType][state] + 1
}
}
Adj
print(cellType, state)
for(cellType in labels) {
finalStates = map$final[which(map$initial == cellType)]
for (state in finalStates) {
print(cellType, state)
Adj[cellType][state] = Adj[cellType][state] + 1
}
}
for(cellType in labels) {
finalStates = map$final[which(map$initial == cellType)]
for (state in finalStates) {
Adj[cellType, state] = Adj[cellType][state] + 1
}
}
Adj = matrix(0, nrow = length(labels), ncol = length(labels))
colnames(Adj) = labels
rownames(Adj) = labels
for(cellType in labels) {
finalStates = map$final[which(map$initial == cellType)]
for (state in finalStates) {
Adj[cellType, state] = Adj[cellType][state] + 1
}
}
Adj = matrix(0, nrow = length(labels), ncol = length(labels))
colnames(Adj) = labels
rownames(Adj) = labels
for(cellType in labels) {
finalStates = map$final[which(map$initial == cellType)]
for (state in finalStates) {
Adj[cellType, state] = Adj[cellType, state] + 1
}
}
Adj = matrix(0, nrow = length(labels), ncol = length(labels))
colnames(Adj) = labels
rownames(Adj) = labels
Adj
map
plot_labels = c(labels, "IL10+TGFB+")
plot_labels = c(labels, "IL10+TGFB+")
Adj = matrix(0, nrow = length(plot_labels), ncol = length(plot_labels))
colnames(Adj) = plot_labels
rownames(Adj) = plot_labels
for(cellType in plot_labels) {
finalStates = map$final[which(map$initial == cellType)]
for (state in finalStates) {
Adj[cellType, state] = Adj[cellType, state] + 1
}
}
Adj
library(igraph)
#import the sample_dw_adj.csv file:
#dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE) # read .csv file
#m=as.matrix(dat)
net=graph.adjacency(Adj,mode="directed",weighted=TRUE,diag=FALSE) #the only difference between this and the weighted network code is that mode="directed"
plot.igraph(net,vertex.label=V(net)$name,layout=layout.fruchterman.reingold, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5)
plot.igraph(net,vertex.label=V(net)$name, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5)
plot.igraph(net,vertex.label=V(net)$name, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5, vertex.size = c(10,10))
plot.igraph(net,vertex.label=V(net)$name, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5, vertex.size = c(10,10, 10))
plot.igraph(net,vertex.label=V(net)$name,layout=layout.fruchterman.reingold, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5)
plot.igraph(net,vertex.label=V(net)$name,layout=layout.bipartite(), vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5)
plot.igraph(net,vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5)
Adj
plot.igraph(net, vertex.size = 5, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5)
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5)
plot.igraph(net, vertex.size = 50, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5)
plot.igraph(net, vertex.size = 100, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5)
plot.igraph(net, vertex.size = 25, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5)
plot.igraph(net, vertex.size = 40, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5)
net=[from=V(net), to = V(net)]
net[from=V(net), to = V(net)] = 1
plot.igraph(net, vertex.size = 40, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5)
#import the sample_dw_adj.csv file:
#dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE) # read .csv file
#m=as.matrix(dat)
net=graph.adjacency(Adj,mode="directed",weighted=TRUE,diag=FALSE) #the only difference between this and the weighted network code is that mode="directed"
for(cellType in plot_labels) {
net[from = cellType, to = cellType] = Adj[cellType, cellType]
}
plot.igraph(net, vertex.size = 40, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5)
net[from = V(cellType), to = V(cellType) ] = Adj[cellType, cellType]
net
net[from = Th0]
net[from = "Th0"]
net[from = "Th0", to = "Th1"]
net[from = "Th0", to = "Th0"]
#import the sample_dw_adj.csv file:
#dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE) # read .csv file
#m=as.matrix(dat)
net=graph.adjacency(Adj,mode="directed",weighted=TRUE,diag=FALSE) #the only difference between this and the weighted network code is that mode="directed"
net[from = "Th0", to = "Th1"]
net[from = "Th0", to = "Th0"]
for(cellType in plot_labels) {
net[from = cellType, to = cellType ] = Adj[cellType, cellType]
}
Th0
net[from = "Th0", to = "Th0"]
plot.igraph(net, vertex.size = 40, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5)
#import the sample_dw_adj.csv file:
#dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE) # read .csv file
#m=as.matrix(dat)
net=graph.adjacency(Adj,mode="directed",weighted=TRUE,diag=FALSE) #the only difference between this and the weighted network code is that mode="directed"
plot.igraph(net, vertex.size = 40, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5)
net[from = "Th0", to = "Th1"]
net[from = "Th0", to = "Th0"]
for(cellType in plot_labels) {
net[from = cellType, to = cellType ] = Adj[cellType, cellType]
}
net[from = "Th0", to = "Th0"]
plot.igraph(net, vertex.size = 40, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5)
Adj
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1.5)
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=0.5)
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/3, edge.arrow.size=1)
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight, edge.arrow.size=1)
#import the sample_dw_adj.csv file:
#dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE) # read .csv file
#m=as.matrix(dat)
net=graph.adjacency(Adj,mode="directed",weighted=TRUE,diag=FALSE) #the only difference between this and the weighted network code is that mode="directed"
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight, edge.arrow.size=1)
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight, edge.arrow.size=1.5)
#import the sample_dw_adj.csv file:
#dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE) # read .csv file
#m=as.matrix(dat)
net=graph.adjacency(Adj,mode="directed",weighted=TRUE,diag=FALSE) #the only difference between this and the weighted network code is that mode="directed"
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight, edge.arrow.size=1.5)
for(cellType in plot_labels) {
net[from = cellType, to = cellType ] = Adj[cellType, cellType]
}
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight, edge.arrow.size=1.5)
plot(net)
plot.graph(net)
plot.igraph(net)
plot.igraph(net)
plot.igraph(net)
plot.igraph(net)
plot.igraph(net)
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name,layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight, edge.arrow.size=1.5)
plot.igraph(net)
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight, edge.arrow.size=1.5)
plot.igraph(net, vertex.size = 20)
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name)
plot.igraph(net, vertex.size = 20)
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name)
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle)
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle,vertex.label.color="black")
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle,vertex.label.color="black", edge.color="black")
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle,vertex.label.color="black", edge.color="black", edge.width=E(net)$weight)
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle,vertex.label.color="black", edge.color="black", edge.width=E(net)$weight/3)
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle,vertex.label.color="black", edge.color="black")
#import the sample_dw_adj.csv file:
#dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE) # read .csv file
#m=as.matrix(dat)
net=graph.adjacency(Adj,mode="directed",weighted=TRUE,diag=FALSE) #the only difference between this and the weighted network code is that mode="directed"
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle,vertex.label.color="black", edge.color="black")
for(cellType in plot_labels) {
if (Adj[cellType, cellType] > 0 ){
net[from = cellType, to = cellType ] = Adj[cellType, cellType]
}
}
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle,vertex.label.color="black", edge.color="black")
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight, edge.arrow.size=1.5)
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/2, edge.arrow.size=1.5)
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle,vertex.label.color="black", edge.color="black")
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/2, edge.arrow.size=1.5)
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.reingold.tilford, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/2, edge.arrow.size=1.5)
layout.circle
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/2, edge.arrow.size=1.5)
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle,vertex.label.color="black", edge.color="black")
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/2, edge.arrow.size=1.5)
layout.reingold.tilford
layout.reingold.tilford(net)
layout.circle(net)
Adj
l = matrix(ncol = 2, nrow = length(plot_labels))
l
layout.self = matrix(ncol = 2, nrow = length(plot_labels))
rownames(layout.self) = plot_labels
layout.self
colnames(layout.self) = c("x", "y")
layout.self
microenvironment = c("IL12e", "IFNGe", "IL2e", "IL4e", "IL21e", "TGFBe", "IL10e", "IL27e", "INSULIN")
pro_Th0 = c(0,0,0,0,0,0,0,0,0)
pro_Th1 = c(1,1,0,0,0,0,0,0,0)
pro_Th2 = c(0,0,1,1,0,0,0,0,0)
pro_Th17 =c(0,0,0,0,1,1,0,0,0)
pro_iTreg=c(0,0,1,0,0,1,0,0,0)
pro_Tr1 = c(0,0,0,0,0,0,1,1,0)
network = fixGenes(network, fixIndices = microenvironment, values = pro_iTreg)
STG = getAttractors(network)
plotStateGraph(STG)
BoolNetPerturb::labelAttractors(STG, labelsTh17Treg)
BoolNetPerturb::labelAttractors(STG, df.rules)
map = BoolNetPerturb::cellFateMap(network, genes = c("TBET", "IFNG", "GATA3", "IL2", "IL4", "RORGT", "IL21", "FOXP3", "TGFB", "IL10"), label.rules = df.rules)
map
plot_labels = c(labels, "IL10+TGFB+")
Adj = matrix(0, nrow = length(plot_labels), ncol = length(plot_labels))
colnames(Adj) = plot_labels
rownames(Adj) = plot_labels
for(cellType in plot_labels) {
finalStates = map$final[which(map$initial == cellType)]
for (state in finalStates) {
Adj[cellType, state] = Adj[cellType, state] + 1
}
}
#
# Plot using igraph
#
library(igraph)
#import the sample_dw_adj.csv file:
#dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE) # read .csv file
#m=as.matrix(dat)
net=graph.adjacency(Adj,mode="directed",weighted=TRUE,diag=FALSE) #the only difference between this and the weighted network code is that mode="directed"
#net[from=V(net), to = V(net)] = 1
for(cellType in plot_labels) {
if (Adj[cellType, cellType] > 0) {
net[from = cellType, to = cellType ] = Adj[cellType, cellType]
}
}
layout.self = matrix(ncol = 2, nrow = length(plot_labels))
rownames(layout.self) = plot_labels
colnames(layout.self) = c("x", "y")
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/2, edge.arrow.size=1.5)
Adj
map
plot_labels = c(labels, "IL10+TGFB+")
Adj = matrix(0, nrow = length(plot_labels), ncol = length(plot_labels))
colnames(Adj) = plot_labels
rownames(Adj) = plot_labels
for(cellType in plot_labels) {
finalStates = map$final[which(map$initial == cellType)]
for (state in finalStates) {
Adj[cellType, state] = Adj[cellType, state] + 1
}
}
plot_labels = c(labels, "IL10+TGFB+", "IL10+TGFB+/iTreg")
plot_labels = c(labels, "IL10+TGFB+", "IL10+TGFB+/iTreg")
Adj = matrix(0, nrow = length(plot_labels), ncol = length(plot_labels))
colnames(Adj) = plot_labels
rownames(Adj) = plot_labels
for(cellType in plot_labels) {
finalStates = map$final[which(map$initial == cellType)]
for (state in finalStates) {
Adj[cellType, state] = Adj[cellType, state] + 1
}
}
map
plot_labels = c(labels, "IL10+TGFB+", "IL10+TGFB+/iTreg", "Th1R/Th1R")
Adj = matrix(0, nrow = length(plot_labels), ncol = length(plot_labels))
colnames(Adj) = plot_labels
rownames(Adj) = plot_labels
for(cellType in plot_labels) {
finalStates = map$final[which(map$initial == cellType)]
for (state in finalStates) {
Adj[cellType, state] = Adj[cellType, state] + 1
}
}
plot_labels = c(labels, "IL10+TGFB+", "IL10+TGFB+/iTreg", "Th1R/Th1R", "RORGT+/TGFB+")
Adj = matrix(0, nrow = length(plot_labels), ncol = length(plot_labels))
colnames(Adj) = plot_labels
rownames(Adj) = plot_labels
for(cellType in plot_labels) {
finalStates = map$final[which(map$initial == cellType)]
for (state in finalStates) {
Adj[cellType, state] = Adj[cellType, state] + 1
}
}
library(igraph)
#import the sample_dw_adj.csv file:
#dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE) # read .csv file
#m=as.matrix(dat)
net=graph.adjacency(Adj,mode="directed",weighted=TRUE,diag=FALSE) #the only difference between this and the weighted network code is that mode="directed"
#net[from=V(net), to = V(net)] = 1
for(cellType in plot_labels) {
if (Adj[cellType, cellType] > 0) {
net[from = cellType, to = cellType ] = Adj[cellType, cellType]
}
}
layout.self = matrix(ncol = 2, nrow = length(plot_labels))
rownames(layout.self) = plot_labels
colnames(layout.self) = c("x", "y")
plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle, vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/2, edge.arrow.size=1.5)
Adj
?cellFateMap
head(map)
map
head(mapply(function, ...))
head(map)
