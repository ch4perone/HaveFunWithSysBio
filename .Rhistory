for(cellType in plot_labels) {
if (Adj[cellType, cellType] > 0) {
print(cellType)
net[from = cellType, to = cellType ] = Adj[cellType, cellType]
}
}
layout.self = matrix(-2, ncol = 2, nrow = length(plot_labels))
rownames(layout.self) = plot_labels
colnames(layout.self) = c("x", "y")
layout.self['Th0', ] = c(0,0)
layout.self['Th1', ] = c(0.3,1)
layout.self['Th1R', ] =c(0.7,0.5)
layout.self['Th17', ] =c(1,0)
layout.self['iTreg', ]=c(0.7,-0.5)
layout.self['RORGT+', ]=c(0.3,-1)
layout.self["IL10+TGFB+", ] = c(-0.3,-1)
layout.self['IL10+',] = c(-0.7, -0.5)
layout.self['Th2R',] = c(-1, 0)
layout.self['Th2',] = c(-0.7, 0.5)
layout.self['TGFB+',] = c(-0.3, 1)
layout.self['TBET+',] = c(-1, -1)
layout.self['GATA3+',] = c(-1, -1.5)
print(layout.self)
regCellTypes = c("iTreg", "Th1R", "Th2R", "Tr1", "IL10+", "TGFB+", "IL10+TGFB+")
effCellTypes = vector() #c("Th1", "Th2", "Th17")
colors = c("orange", "skyblue", "green", "red", "grey")[1 + V(net)$name %in% c("Th0") + 2 * V(net)$name %in% regCellTypes + 3 * V(net)$name %in% effCellTypes  + 4 * V(net)$name %in% c("GATA3+", "TBET+")]
plt = plot.igraph(net, vertex.color = colors, vertex.size = 28, vertex.label=V(net)$name, layout=layout.self,  vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/2, edge.arrow.size=1.5)
#plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle,vertex.label.color="black", edge.color="black")
return(Adj)
}
adj = createCellFateMap(network, micro_env = microenvironment, micro_val = pro_iTreg, insulin = 1,  df.rules = df.rules, plot_labels = c(labels, "IL10+TGFB+"))
ggplot(df, aes(group=GROUP, y=Y, x=GROUP)) +
ylab("agreement of update methods") +
xlab("initial number of genes active") +
geom_boxplot(aes(x = GROUP)  fill = "lightblue")
ggplot(df, aes(group=GROUP, y=Y, x=GROUP)) +
ylab("agreement of update methods") +
xlab("initial number of genes active") +
geom_boxplot(aes(x = GROUP),  fill = "lightblue")
ggplot(melt(df, id.vars = GROUP), aes(group=GROUP, y=Y, x=GROUP)) +
ylab("agreement of update methods") +
xlab("initial number of genes active") +
geom_boxplot(aes(x = GROUP),  fill = "lightblue")
df
ggplot(melt(df, id.var = "GROUP"), aes(group=GROUP, y=Y, x=GROUP)) +
ylab("agreement of update methods") +
xlab("initial number of genes active") +
geom_boxplot(aes(x = GROUP),  fill = "lightblue")
ggplot(df, aes(group=GROUP, y=Y, x=GROUP)) +
ylab("agreement of update methods") +
xlab("initial number of genes active") +
geom_boxplot(aes(x = GROUP),  fill = "lightblue")
df
ggplot(df, aes(group=GROUP, y=Y, x=GROUP)) +
scale_x_discrete(x=GROUP) +
ylab("agreement of update methods") +
xlab("initial number of genes active") +
geom_boxplot(aes(x = GROUP),  fill = "lightblue")
ggplot(df, aes(group=GROUP, y=Y)) +
scale_x_discrete(x=GROUP) +
ylab("agreement of update methods") +
xlab("initial number of genes active") +
geom_boxplot(aes(x = GROUP),  fill = "lightblue")
ggplot(df, aes(group=GROUP, y=Y, x=GROUP)) +
scale_x_discrete(x=GROUP, 0, 10) +
ylab("agreement of update methods") +
xlab("initial number of genes active") +
geom_boxplot(aes(x = GROUP),  fill = "lightblue")
ggplot(df, aes(group=GROUP, y=Y, x=GROUP)) +
scale_x_discrete() +
ylab("agreement of update methods") +
xlab("initial number of genes active") +
geom_boxplot(aes(x = GROUP),  fill = "lightblue")
ggplot(df, aes(group=GROUP, y=Y, x=GROUP)) +
scale_x_discrete(GROUP) +
ylab("agreement of update methods") +
xlab("initial number of genes active") +
geom_boxplot(aes(x = GROUP),  fill = "lightblue")
ggplot(df, aes(group=GROUP, y=Y, x=GROUP)) +
scale_x_discrete() +
ylab("agreement of update methods") +
xlab("initial number of genes active") +
geom_boxplot(aes(x = GROUP),  fill = "lightblue")
ggplot(df, aes(group=GROUP, y=Y, x=GROUP)) +
scale_x_discrete(0:10) +
ylab("agreement of update methods") +
xlab("initial number of genes active") +
geom_boxplot(aes(x = GROUP),  fill = "lightblue")
ggplot(df, aes(group=GROUP, y=Y, x=GROUP)) +
ylab("agreement of update methods") +
xlab("initial number of genes active") +
geom_boxplot(aes(x = GROUP),  fill = "lightblue") +
scale_x_discrete(0:10)
ggplot(df, aes(group=GROUP, y=Y, x=GROUP)) +
ylab("agreement of update methods") +
xlab("initial number of genes active") +
geom_boxplot(aes(x = GROUP),  fill = "lightblue") +
scale_x_discrete()
ggplot(df, aes(group=GROUP, y=Y, x=GROUP)) +
geom_boxplot(aes(x = GROUP),  fill = "lightblue") +
ylab("agreement of update methods") +
xlab("initial number of genes active") +
scale_x_discrete()
ggplot(df, aes(group=GROUP, y=Y, x=GROUP)) +
geom_boxplot(aes(x = GROUP),  fill = "lightblue") +
ylab("agreement of update methods") +
xlab("initial number of genes active") +
#
# Construct Cell Fate Map
# >> computes for all attractors, every transient perturbation for explicit "genes"
# >> lists from initial state, which cell fate is attained after each transient flip
# >> make plot out of this
createCellFateMap = function(network, micro_env, micro_val, insulin = 0, df.rules, plot_labels) {
micro_val[length(micro_val)] = insulin
network = fixGenes(network, fixIndices = micro_env, values = micro_val)
map = BoolNetPerturb::cellFateMap(network, genes = c("TBET", "IFNG", "GATA3", "IL2", "IL4", "RORGT", "IL21", "FOXP3", "TGFB", "IL10"), label.rules = df.rules)
# Compute adjancency matrix & plot states
Adj = matrix(0, nrow = length(plot_labels), ncol = length(plot_labels))
colnames(Adj) = plot_labels
rownames(Adj) = plot_labels
for(cellType in plot_labels) {
finalStates = map$final[which(map$initial == cellType)]
for (state in finalStates) {
if (state %in% plot_labels) {
Adj[cellType, state] = Adj[cellType, state] + 1
}
}
}
# Plot using igraph
library(igraph)
net=graph.adjacency(Adj,mode="directed",weighted=TRUE,diag=FALSE) #the only difference between this and the weighted network code is that mode="directed"
for(cellType in plot_labels) {
if (Adj[cellType, cellType] > 0) {
print(cellType)
net[from = cellType, to = cellType ] = Adj[cellType, cellType]
}
}
layout.self = matrix(-2, ncol = 2, nrow = length(plot_labels))
rownames(layout.self) = plot_labels
colnames(layout.self) = c("x", "y")
layout.self['Th0', ] = c(0,0)
layout.self['Th1', ] = c(0.3,1)
layout.self['Th1R', ] =c(0.7,0.5)
layout.self['Th17', ] =c(1,0)
layout.self['iTreg', ]=c(0.7,-0.5)
layout.self['RORGT+', ]=c(0.3,-1)
layout.self["IL10+TGFB+", ] = c(-0.3,-1)
layout.self['IL10+',] = c(-0.7, -0.5)
layout.self['Th2R',] = c(-1, 0)
layout.self['Th2',] = c(-0.7, 0.5)
layout.self['TGFB+',] = c(-0.3, 1)
layout.self['TBET+',] = c(-1, -1)
layout.self['GATA3+',] = c(-1, -1.5)
print(layout.self)
regCellTypes = c("iTreg", "Th1R", "Th2R", "Tr1", "IL10+", "TGFB+", "IL10+TGFB+")
effCellTypes = vector() #c("Th1", "Th2", "Th17")
colors = c("orange", "skyblue", "green", "red", "grey")[1 + V(net)$name %in% c("Th0") + 2 * V(net)$name %in% regCellTypes + 3 * V(net)$name %in% effCellTypes  + 4 * V(net)$name %in% c("GATA3+", "TBET+")]
plt = plot.igraph(net, vertex.color = colors, vertex.size = 28, vertex.label=V(net)$name, layout=layout.self,  vertex.label.color="black",edge.color="black",edge.width=E(net)$weight/2, edge.arrow.size=1.5)
#plot.igraph(net, vertex.size = 20, vertex.label=V(net)$name, layout=layout.circle,vertex.label.color="black", edge.color="black")
return(Adj)
}
ggplot(df, aes(group=GROUP, y=Y, x=GROUP)) +
geom_boxplot(aes(x = GROUP),  fill = "lightblue") +
ylab("agreement of update methods") +
xlab("initial number of genes active")
ggplot(df, aes(group=GROUP, y=Y)) +
geom_boxplot(aes(x = GROUP),  fill = "lightblue") +
ylab("agreement of update methods") +
xlab("initial number of genes active")
ggplot(df, aes(group=GROUP, y=Y)) +
scale_x_discrete(GROUP) +
geom_boxplot(aes(x = GROUP),  fill = "lightblue") +
ylab("agreement of update methods") +
xlab("initial number of genes active")
ggplot(df, aes(group=GROUP, y=Y)) +
scale_x_discrete() +
geom_boxplot(aes(x = GROUP),  fill = "lightblue") +
ylab("agreement of update methods") +
xlab("initial number of genes active")
ggplot(df, aes(group=GROUP, y=Y)) +
geom_boxplot(aes(x = GROUP),  fill = "lightblue") +
ylab("agreement of update methods") +
xlab("initial number of genes active")
ggplot(df, aes(x=GROUP, y=Y)) +
geom_boxplot(aes(x = GROUP),  fill = "lightblue") +
ylab("agreement of update methods") +
xlab("initial number of genes active")
df$GROUP
ggplot(df, aes(x=GROUP, y=Y, fill =GROUP )) +
geom_boxplot(aes(x = GROUP),  fill = "lightblue") +
ylab("agreement of update methods") +
xlab("initial number of genes active")
ggplot(df, aes(x=GROUP, y=Y, group=GROUP)) +
geom_boxplot(aes(x = GROUP),  fill = "lightblue") +
ylab("agreement of update methods") +
xlab("initial number of genes active")
ggplot(df, aes(x=GROUP, y=Y, group=GROUP)) +
geom_boxplot(aes(x = GROUP),  fill = "lightblue") +
scale_x_continuous(breaks = 0:10) +
ylab("agreement of update methods") +
xlab("initial number of genes active")
ggplot(df, aes(x=GROUP, y=Y, group=GROUP)) +
geom_boxplot(aes(x = GROUP),  fill = "lightblue") +
scale_x_continuous(breaks = 0:10, minor_breaks = NA) +
ylab("agreement of update methods") +
xlab("initial number of genes active")
ggplot(df, aes(x=GROUP, y=Y, group=GROUP)) +
geom_boxplot(aes(x = GROUP),  fill = "lightblue") +
scale_x_continuous(breaks = 0:10, minor_breaks = NULL) +
ylab("agreement of update methods") +
xlab("initial number of genes active")
ggplot(melt(globalAgreementVector), aes(y=value, "all states")) +
ylab("agreement of update methods") +
geom_boxplot(fill = "lightblue")
for (k in 1:100) {
counter = 0
counter_vector = rep(0, 11) # errors in vector according number of 1's, starting with 0 1's
full_vector = rep(0, 11)
for (j in 1:nrow(all_states) ) { # might take awhile
init = all_states[j,]
num_ones = sum(init)
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
#cat('\n',rownames(MicroEnv)[i], ":\n")
result = compareUpdateMethod(network, init_state = init, micro_env = microenvironment, micro_val = pro_mic, label.rules = df.rules)
#cat(unlist(result), "\n")
full_vector[num_ones + 1] = full_vector[num_ones + 1] + 1
if(as.character(result$sync) == as.character(result$async)) {
counter = counter + 1
counter_vector[num_ones + 1] = counter_vector[num_ones + 1] + 1
}
if(length(as.character(result$async)) > 1) {
print(2)
}
}
}
cat("iteration: ", k, " done\n")
cat("total: ", counter, " percent", counter / (1024 * nrow(MicroEnv)) * 100, "\n")
full_vector
counter_vector
globalAgreementVector = c(globalAgreementVector, counter / (1024 * nrow(MicroEnv)))
Y = c(Y, counter_vector / full_vector)
GROUP = c(GROUP, seq(0, 10))
}
df = data.frame(Y, GROUP)
ggplot(melt(globalAgreementVector), aes(y=value, "all states")) +
ylab("agreement of update methods") +
geom_boxplot(fill = "lightblue")
ggplot(df, aes(x=GROUP, y=Y, group=GROUP)) +
geom_boxplot(aes(x = GROUP),  fill = "lightblue") +
scale_x_continuous(breaks = 0:10, minor_breaks = NULL) +
ylab("agreement of update methods") +
xlab("initial number of genes active")
ggplot(melt(globalAgreementVector), aes(y=value, "all states")) +
ylab("agreement of update methods") +
geom_boxplot(fill = "lightblue")
M_KO = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M_KO = c(M_KO, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, knockout = "GATA3", micro_val = pro_mic, insulin = 1, attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M_KO = matrix(M_KO, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M_KO) = c(labels, "IL10+TGFB+")
rownames(M_KO) = rownames(MicroEnv)
M_KO = M_KO[,c(-3,-9)]
y_ord = rownames(M_KO)
jpeg('koGATA3Heatmap.jpg',units = "cm" , width = 25.0, height = 15.0, res = 600)
ggplot(melt(M_KO), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "thistle1", high = "deeppink3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
dev.off()
ggplot(melt(M_KO), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "thistle1", high = "deeppink3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
M_HIV = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M_HIV = c(M_HIV, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, knockout = "GATA3", micro_val = pro_mic, insulin = 1, attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M_HIV = matrix(M_HIV, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M_HIV) = c(labels, "IL10+TGFB+")
rownames(M_HIV) = rownames(MicroEnv)
ggplot(melt(M_HIV), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "thistle1", high = "deeppink3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
for (gene in network$genes[1:10]) {
M_HIV = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M_HIV = c(M_HIV, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, knockout = gene, micro_val = pro_mic, insulin = 1, attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M_HIV = matrix(M_HIV, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M_HIV) = c(labels, "IL10+TGFB+")
rownames(M_HIV) = rownames(MicroEnv)
print(M_HIV)
}
for (gene in network$genes[1:10]) {
M_HIV = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M_HIV = c(M_HIV, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, knockout = gene, micro_val = pro_mic, insulin = 1, attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M_HIV = matrix(M_HIV, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M_HIV) = c(labels, "IL10+TGFB+")
rownames(M_HIV) = rownames(MicroEnv)
print(M_HIV[,c("Th1", "Th1R", "Th17")])
}
for (gene in network$genes[1:10]) {
M_HIV = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M_HIV = c(M_HIV, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, knockout = gene, micro_val = pro_mic, insulin = 1, attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M_HIV = matrix(M_HIV, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M_HIV) = c(labels, "IL10+TGFB+")
rownames(M_HIV) = rownames(MicroEnv)
print(gene, sum(M_HIV[,c("Th1", "Th1R", "Th17")]))
}
for (gene in network$genes[1:10]) {
M_HIV = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M_HIV = c(M_HIV, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, knockout = gene, micro_val = pro_mic, insulin = 1, attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M_HIV = matrix(M_HIV, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M_HIV) = c(labels, "IL10+TGFB+")
rownames(M_HIV) = rownames(MicroEnv)
print(gene)
print(sum(M_HIV[,c("Th1", "Th1R", "Th17")]))
}
getCellDifferentiationBasinSizes = function(network, micro_env, micro_val, insulin = 0, knockout=vector(), knockin=vector(), attractorLabels, label.rules) {
basinSizes = rep(0, length(attractorLabels))
names(basinSizes) = attractorLabels
#fix microenvironment | knock-out genes | and insulin
micro_val[length(micro_val)] = insulin
for(gene in knockin) {
micro_env = c(micro_env, gene)
micro_val = c(micro_val, 1)
}
for(gene in knockout) {
micro_env = c(micro_env, gene)
micro_val = c(micro_val, 0)
}
network = fixGenes(network, fixIndices = micro_env, values = micro_val)
attr = getAttractors(network, type = "synchronous")
attrLabels = BoolNetPerturb::labelAttractors(attr, label.rules = label.rules)
for (i in 1:length(attr$attractors)) {
if (attrLabels[i] %in% attractorLabels) {
basinSizes[attrLabels[i]] = basinSizes[attrLabels[i]] + attr$attractors[[i]]$basinSize
} else {
#print(attrLabels[i])
}
}
return(basinSizes)
}
for (gene in network$genes[1:10]) {
M_HIV = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M_HIV = c(M_HIV, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, knockout = gene, micro_val = pro_mic, insulin = 1, attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M_HIV = matrix(M_HIV, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M_HIV) = c(labels, "IL10+TGFB+")
rownames(M_HIV) = rownames(MicroEnv)
print(gene)
print(sum(M_HIV[,c("Th1", "Th1R", "Th17")]))
}
ggplot(melt(M_HIV), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "thistle1", high = "deeppink3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
network$genes
for (gene in network$genes[1:10]) {
M_HIV = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M_HIV = c(M_HIV, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, knockin = gene, micro_val = pro_mic, insulin = 1, attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M_HIV = matrix(M_HIV, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M_HIV) = c(labels, "IL10+TGFB+")
rownames(M_HIV) = rownames(MicroEnv)
print(gene)
print(sum(M_HIV[,c("Th1", "Th1R", "Th17")]))
}
M_HIV = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M_HIV = c(M_HIV, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, knockin = "GATA3", micro_val = pro_mic, insulin = 1, attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M_HIV = matrix(M_HIV, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M_HIV) = c(labels, "IL10+TGFB+")
rownames(M_HIV) = rownames(MicroEnv)
ggplot(melt(M_HIV), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "thistle1", high = "deeppink3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
M_HIV = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M_HIV = c(M_HIV, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, knockin = "IL4", micro_val = pro_mic, insulin = 1, attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M_HIV = matrix(M_HIV, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M_HIV) = c(labels, "IL10+TGFB+")
rownames(M_HIV) = rownames(MicroEnv)
ggplot(melt(M_HIV), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "thistle1", high = "deeppink3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
#
# HIV
#
for (gene in network$genes[1:10]) {
M_HIV = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M_HIV = c(M_HIV, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, knockin = gene, micro_val = pro_mic, insulin = 0, attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M_HIV = matrix(M_HIV, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M_HIV) = c(labels, "IL10+TGFB+")
rownames(M_HIV) = rownames(MicroEnv)
print(gene)
print(sum(M_HIV[,c("Th1", "Th1R", "Th17")]))
}
M_HIV = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M_HIV = c(M_HIV, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, knockin = "IL4", micro_val = pro_mic, insulin = 0, attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M_HIV = matrix(M_HIV, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M_HIV) = c(labels, "IL10+TGFB+")
rownames(M_HIV) = rownames(MicroEnv)
ggplot(melt(M_HIV), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "thistle1", high = "deeppink3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
for (gene in network$genes[1:10]) {
M_HIV = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M_HIV = c(M_HIV, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, knockout = gene, micro_val = pro_mic, insulin = 0, attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M_HIV = matrix(M_HIV, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M_HIV) = c(labels, "IL10+TGFB+")
rownames(M_HIV) = rownames(MicroEnv)
print(gene)
print(sum(M_HIV[,c("Th1", "Th1R", "Th17")]))
}
M_HIV = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M_HIV = c(M_HIV, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, knockin = "GATA3", micro_val = pro_mic, insulin = 0, attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M_HIV = matrix(M_HIV, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M_HIV) = c(labels, "IL10+TGFB+")
rownames(M_HIV) = rownames(MicroEnv)
ggplot(melt(M_HIV), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "thistle1", high = "deeppink3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
M_HIV = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M_HIV = c(M_HIV, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, knockin = "IL4", micro_val = pro_mic, insulin = 0, attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M_HIV = matrix(M_HIV, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M_HIV) = c(labels, "IL10+TGFB+")
rownames(M_HIV) = rownames(MicroEnv)
ggplot(melt(M_HIV), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "thistle1", high = "deeppink3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
jpeg('kiIL4Heatmap.jpg',units = "cm" , width = 25.0, height = 15.0, res = 600)
M_HIV = M_HIV[,c(-3,-9)]
y_ord = rownames(M_HIV)
ggplot(melt(M_HIV), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "thistle1", high = "deeppink3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
dev.off()
effectorSumHIV = sum(M_HIV[, c("Th1", "Th2", "Th17")])
regulatorySumHIV = sum(M_HIV[, c("Th1R", "Th2R", "iTreg", "IL10+", "IL10+TGFB+")])
effectorSumHIV / regulatorySumHIV
M_HIV = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M_HIV = c(M_HIV, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, knockin = "GATA3", micro_val = pro_mic, insulin = 0, attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M_HIV = matrix(M_HIV, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M_HIV) = c(labels, "IL10+TGFB+")
rownames(M_HIV) = rownames(MicroEnv)
jpeg('kiGATA3Heatmap.jpg',units = "cm" , width = 25.0, height = 15.0, res = 600)
M_HIV = M_HIV[,c(-3,-9)]
y_ord = rownames(M_HIV)
ggplot(melt(M_HIV), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "thistle1", high = "deeppink3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
dev.off()
