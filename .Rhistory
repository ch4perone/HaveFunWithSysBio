y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
network$genes
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockout = network$genes[1], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockout = network$genes[2], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockout = network$genes[3], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockout = network$genes[4], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockout = network$genes[5], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockout = network$genes[6], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockout = network$genes[7], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockout = network$genes[8], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockout = network$genes[9], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockout = network$genes[10], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockin = network$genes[10], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockin = network$genes[9], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockin = network$genes[8], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
effectorSumINS = sum(INS_M[, c("Th1", "Th2", "Th17")])
regulatorySumINS = sum(INS_M[, c("Th1R", "Th2R", "iTreg", "IL10+", "IL10+TGFB+")])
effectorSumINS / regulatorySumINS
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockin = network$genes[7], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
M
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockin = network$genes[6], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockin = network$genes[5], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockin = network$genes[4], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockin = network$genes[3], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockin = network$genes[2], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockin = network$genes[1], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockout = network$genes[3], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockout = network$genes[5], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockout = network$genes[3], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, knockout = network$genes[5], attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 0, attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
network$genes[3]
network$genes[5]
network$genes[3]
# Compute entire matrix
M = vector()
for(i in 1:nrow(MicroEnv)) {
pro_mic = MicroEnv[i,]
M = c(M, getCellDifferentiationBasinSizes(network, micro_env = microenvironment, micro_val = pro_mic, insulin = 1, attractorLabels = c(labels, "IL10+TGFB+"), label.rules = df.rules))
}
M = matrix(M, nrow = nrow(MicroEnv), byrow = TRUE)
colnames(M) = c(labels, "IL10+TGFB+")
rownames(M) = rownames(MicroEnv)
y_ord = rownames(M)
ggplot(melt(M), aes(Var2, ordered(Var1, rev(y_ord)) , fill=value)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(na.value = "white", low = "white", high = "violetred3", trans = log10_trans(), limits = c(NA, 1024)) +
xlab("Cell type") +
ylab("Micro-environment")
# statistics
effectorSum = sum(M[, c("Th1", "Th2", "Th17")])
regulatorySum = sum(M[, c("Th1R", "Th2R", "iTreg", "IL10+" , "IL10+TGFB+")])
effectorSum / regulatorySum
